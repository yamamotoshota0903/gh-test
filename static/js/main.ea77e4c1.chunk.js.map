{"version":3,"sources":["Chat/Todo.js","Chat/TodoList.js","Chat/Form.js","Chat/Chat.js","Login/LogForm.js","Login/Login.js","PrivateRoute.js","App.js","serviceWorker.js","index.js"],"names":["typeflag","Todo","type","this","props","className","handleflag","title","Component","TodoList","messages","map","todo","key","id","Form","onSubmit","name","Chat","handleToLogin","history","push","console","log","state","countmsg","e","preventDefault","target","value","slice","setState","scroll","scrollToBottom","myHeaders","Headers","append","raw","JSON","stringify","fetch","method","headers","body","redirect","then","response","json","oUtput","textToSpeech","displayText","catch","error","alert","element","document","getElementById","scrollIntoView","behavior","block","onClick","handleSubmit","bind","withRouter","LogForm","link","handleToChat","Login","uid","pass","Auth","updateState","handleLogin","App","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ea77e4c1.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './css/Todo.css';\r\nvar typeflag = true;\r\nclass Todo extends Component {\r\n    \r\n    handleflag(){\r\n        const type = this.props.type;\r\n        if(type===\"USER\"){\r\n            typeflag = true;\r\n        }else{\r\n            typeflag = false;\r\n        }\r\n    }\r\n    render() {\r\n        var className = 'USER';\r\n        this.handleflag();\r\n        if(typeflag){\r\n            return(\r\n            <div className={className}>\r\n                <div className=\"bms_message bms_right\">\r\n                    <div className=\"bms_message_box\">\r\n                        <div className=\"bms_message_content\">\r\n                            <div className=\"bms_message_text\">{this.props.title}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"bms_clear\"></div>\r\n            </div>\r\n            );\r\n        }else{\r\n            className = 'API';\r\n            return(\r\n            <div className={className}>\r\n                <div className=\"bms_message bms_left\">\r\n                    <div className=\"bms_message_box\">\r\n                        <div className=\"bms_message_content\">\r\n                            <div className=\"bms_message_text\">{this.props.title}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"bms_clear\"></div>\r\n            </div>\r\n                \r\n            );\r\n        }\r\n        \r\n      }\r\n    }\r\n    export default Todo","import React, { Component } from 'react';\r\nimport Todo from './Todo';\r\n\r\n\r\nclass TodoList extends Component {\r\n\r\n  render() {\r\n    const messages = this.props.messages.map( todo =>\r\n      <Todo\r\n        key={todo.id}\r\n        {...todo}\r\n      />\r\n    )\r\n\r\n    return(\r\n      <div id=\"Chat\">\r\n        {messages}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoList","import React, { Component } from 'react';\r\nimport './css/Form.css';\r\n\r\nclass Form extends Component {\r\n\r\n  render() {\r\n    return (\r\n    <div className=\"bms_send\">\r\n        <form onSubmit={this.props.onSubmit}>       \r\n           <textarea  name=\"title\" id=\"bms_send_message\"></textarea>\r\n           <button id=\"bms_send_btn_cover\"></button>       \r\n        </form>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;","import React, { Component } from 'react';\nimport TodoList from './TodoList';\nimport Form from './Form';\nimport './css/Chat.css';\nimport { withRouter } from 'react-router';\nimport { animateScroll as scroll } from 'react-scroll';\n\nclass Chat extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      messages: [\n        {\n          id: 1,\n          title: \"今日はどうなさいましたか？\",\n          type: \"API\",\n        }\n      ],\n      countmsg: 2\n    }\n  }\n  handleSubmit(e) {\n    e.preventDefault();\n    const title = e.target.title.value;\n    const type = \"USER\";\n    if (!title) {\n      alert(\"メッセージを入力してください\");\n      return;\n    }\n    const messages = this.state.messages.slice();\n    \n    \n    messages.push({\n      title: title,\n      type: type,\n      id: this.state.countmsg,\n    });\n    const countmsg = this.state.countmsg+1;\n    this.setState({ messages });\n    this.setState({countmsg});\n    \n    e.target.title.value = '';//入力欄をクリアする.\n    //this.Scroll();\n    scroll.scrollToBottom();\n    //以下、API接続\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    var raw = JSON.stringify({\"userId\":\"hoge\",\"input\":title});\n    var requestOptions = {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow'\n    };\n    fetch(\"http://104.198.114.103:9002/api/response/shiraishi-health interview\", requestOptions)\n      .then(response => response.json())\n      .then(json => {\n        console.log(json);\n        var oUtput = json;\n        console.log(oUtput.textToSpeech);\n        messages.push({\n          title: oUtput.displayText,\n          type: \"API\",\n          id: this.state.countmsg,\n        });\n        const countmsg = this.state.countmsg+1;\n        this.setState({ messages });\n        this.setState({countmsg});\n      })\n     /* .then(result => {\n        console.log(result);\n        \n      })*/\n      .catch(error => console.log('error', error));\n      //以下, スクロール用プログラム\n      //this.Scroll();\n      scroll.scrollToBottom();\n  }\n  handleToLogin=()=>{\n      this.props.history.push('/');\n      console.log(\"Log change\");\n  }\n  Scroll(){\n    var element = document.getElementById(\"Chat\");\n    element.scrollIntoView(false);\n    element.scrollIntoView({behavior: \"smooth\", block: \"end\"});\n    \n    console.log(element);\n  }\n\n  render() {\n    //そのうちheaderを分離したコンポーネントとして扱いたい\n    return(\n      <div className=\"app\">\n        <div id=\"message_container\">\n        <div id=\"header\">飯塚市立病院\n          <button id=\"back_to_login\" onClick={this.handleToLogin}/>\n        </div>\n        <br/>\n        <br/>\n        <TodoList messages={this.state.messages} />\n       </div>\n        \n       <Form onSubmit={this.handleSubmit.bind(this)} />\n       \n      </div>\n       )\n   /*ページ分岐の方法\n    let content=()=>{\n    if(this.props.pass=='ibc948'){\n       return(\n      <div className=\"app\">\n        <div id=\"message_container\">\n          <button id=\"back_to_login\"/>\n          <div id=\"header\">HIRO TALK</div>\n          <br/>\n          <br/>\n          <TodoList messages={this.state.messages} />\n       </div>\n        \n       <Form onSubmit={this.handleSubmit.bind(this)} />\n       <button id=\"bms_speech_to_text\"/>\n      </div>\n       )  \n    }\n    else{\n      return(\n      <h1>unauthorized access</h1>\n      )\n  }\n}\n    return(\n      <div>\n      <content />\n      </div>\n    );\n    */\n  }\n  \n}\n\nexport default withRouter(Chat);","import React, { Component } from 'react';\r\nimport './css/LogForm.css';\r\nimport { withRouter } from 'react-router';\r\n//import {Link} from 'react-router-dom';\r\n\r\n\r\nclass LogForm extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            link:\"/\"\r\n        }\r\n    }\r\n    /*handleToChat= () =>{\r\n        if(this.props.Auth){\r\n            this.props.history.push('/Chat');\r\n            console.log(\"Chat change\");\r\n        }else{\r\n            this.props.history.push('/');\r\n            console.log(\"root change\");\r\n        }\r\n    }*/\r\n    /*handleLogin=()=>{\r\n        if(this.props.Auth){\r\n            this.state.link=\"/Chat\";\r\n        }else{\r\n            this.state.link=\"/\";\r\n        }\r\n\r\n    }*/\r\n    render(){\r\n        return(\r\n            <div className=\"logform\">\r\n                <form onSubmit={this.props.onSubmit}>\r\n                    <h1>ID</h1>       \r\n                    <textarea  name=\"uid\" id=\"uid\"></textarea>\r\n                    <br/>\r\n                    <h1>PASSWORD</h1>\r\n                    <textarea  name=\"pass\" id=\"pass\"></textarea>\r\n                    <br/>\r\n                    <br/>\r\n                    <button id=\"logbutton\" onClick={this.props.handleToChat}/>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n//<li><Link to={this.state.link} onClick={this.handleLogin}>link</Link></li>\r\nexport default withRouter(LogForm);","import React, { Component } from 'react';\r\nimport LogForm from './LogForm';\r\nimport { withRouter } from 'react-router';\r\n\r\nimport './css/Login.css';\r\n\r\nclass Login extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n                uid: \"noid\",\r\n                pass: \"nopass\",\r\n                Auth: false\r\n        };\r\n        //this.props.updateState(this.state);\r\n    }\r\n\r\n    \r\n    handleLogin(e) {\r\n        e.preventDefault();\r\n        const uid = e.target.uid.value;\r\n        const pass = e.target.pass.value;\r\n        \r\n        if (!uid) {\r\n          alert(\"IDを入力してください\");\r\n          this.state.Auth=false;\r\n          return;\r\n        }\r\n        if(!pass){\r\n          alert(\"PASSWORDを入力してください\");\r\n          this.state.Auth=false;\r\n          return;\r\n        }\r\n        \r\n        if(uid==\"shiraishi\"){\r\n            if(pass==\"7822\"){\r\n                this.state.Auth=true;\r\n            }\r\n        }\r\n        if(this.state.Auth){\r\n        \r\n            this.setState({ uid:uid });\r\n            this.setState({pass:pass});\r\n\r\n            console.log(this.state.Auth);\r\n            \r\n        }\r\n        else{\r\n            alert(\"IDかPASSWORDが間違っています\");\r\n            this.state.Auth=false;\r\n            return;\r\n        }\r\n        this.props.updateState(this.state);\r\n        this.handleToChat();//2回目のhandleToChat発火\r\n    }\r\n    handleToChat(){\r\n        if(this.state.Auth){\r\n            this.props.history.push('/Chat');\r\n            console.log(\"Chat change2\");\r\n        }else{\r\n            this.props.history.push('/');\r\n            console.log(\"root change2\");\r\n        }\r\n    }\r\n    \r\n    render(){\r\n            return(\r\n            <div className=\"login\">\r\n                <div id=\"header\">飯塚市立病院</div>\r\n                <LogForm onSubmit={this.handleLogin.bind(this)} Auth={this.state.Auth} handleToChat={this.handleToChat.bind(this)}/>\r\n            </div>\r\n            )\r\n    }\r\n}\r\nexport default withRouter(Login);","import React, { Component } from 'react';\r\nimport Login from './Login/Login';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link,\r\n    Redirect\r\n} from 'react-router-dom'\r\n\r\nclass PrivateRoute extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            isAuthenticated: this.props.Auth\r\n        };\r\n    }\r\n    \r\n    \r\n    render(){\r\n          // ルーティング情報を取得.\r\n        const { component : Component, ...rest } = this.props;\r\n\r\n        // ログインチェック状態を取得.\r\n        const isAuthenticated  = this.state.isAuthenticated;\r\n\r\n        return(\r\n            <Route {...rest} render={() => {\r\n                // 未ログインなら、ログイン画面にリダイレクト.\r\n                if (!isAuthenticated) {\r\n                  return <Redirect to={{ pathname: '/', state: { from: this.props.location } }} />\r\n                }\r\n                // ログイン済なら、指定されたコンポーネントを表示.\r\n                return <Component {...this.props} />\r\n              }}\r\n              />\r\n    )\r\n    }\r\n}\r\nexport default PrivateRoute;\r\n/*<Route {...rest} render={props => (isAuthenticated\r\n            ? <Component {...props} />\r\n            : <Redirect to=\"/\"/>\r\n        )}/>*/","import React, { Component } from 'react';\r\nimport Chat from './Chat/Chat';\r\nimport Login from './Login/Login';\r\nimport LogForm from './Login/LogForm';\r\nimport PrivateRoute from './PrivateRoute'\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link,\r\n    Redirect\r\n} from 'react-router-dom'\r\n\r\nclass App extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n                uid: \"noid\",\r\n                pass: \"nopass\",\r\n                Auth: false\r\n        }\r\n    }\r\n    updateState(state){\r\n        this.setState(state);\r\n        \r\n        console.log(\"state was changed\");\r\n        console.log(this.state.Auth);\r\n    }\r\n    render(){\r\n       \r\n        return(\r\n            <Router>\r\n                <Switch>\r\n                    <Route exact path=\"/\" render={ () => <Login updateState={this.updateState.bind(this)}/> }/>\r\n                    <Route exact path=\"/Chat\" render={ () => <Chat /> }/>                  \r\n                    \r\n                </Switch>\r\n            </Router>\r\n            \r\n        )\r\n        \r\n    }\r\n}\r\n//<PrivateRoute exact path=\"/Chat\" component={Chat} Auth={this.state.Auth}/>\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import Login from './Login';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n//ReactDOM.render(<Login />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}